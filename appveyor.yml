environment:
  pypi_pwd:
    secure: NBxQrTtS2/PLDpgIUbQl7Q==
  pypi_user:
    secure: FolmFB1KYPjNxq4LUmk8Rw==

  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
    WITH_COMPILER: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_compiler.cmd"

  matrix:

    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # See: http://www.appveyor.com/docs/installed-software#python

    - PYTHON: "C:\\Python27"
      PYTHON_VERSION: "2.7.x" # currently 2.7.9
      PYTHON_ARCH: "32"
      PYTHON_PYPI: true

    - PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4.x" # currently 3.4.3
      PYTHON_ARCH: "32"

    # does not work as compilation problems with psycopg2
    - PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5.x" # currently 3.5
      PYTHON_ARCH: "32"

    # does not work as compilation problems with psycopg2
    - PYTHON: "C:\\Python36"
      PYTHON_VERSION: "3.6.x" # currently 3.5
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python27-x64"
      PYTHON_VERSION: "2.7.x" # currently 2.7.9
      PYTHON_ARCH: "64"
      WINDOWS_SDK_VERSION: "v7.0"

    - PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4.x" # currently 3.4.3
      PYTHON_ARCH: "64"
      WINDOWS_SDK_VERSION: "v7.1"

    # does not work as compilation problems with psycopg2
    - PYTHON: "C:\\Python35-x64"
      PYTHON_VERSION: "3.5.x" # currently 3.5
      PYTHON_ARCH: "64"
      WINDOWS_SDK_VERSION: "v7.1"

    - PYTHON: "C:\\Python36-x64"
      PYTHON_VERSION: "3.6.x" # currently 3.5
      PYTHON_ARCH: "64"
      WINDOWS_SDK_VERSION: "v7.1"

#    # Also build on a Python version not pre-installed by Appveyor.
#    # See: https://github.com/ogrisel/python-appveyor-demo/issues/10
#
#    - PYTHON: "C:\\Python266"
#      PYTHON_VERSION: "2.6.6"
#      PYTHON_ARCH: "32"

init:
  - "ECHO %PYTHON% %PYTHON_VERSION% %PYTHON_ARCH%"

services:
  - postgresql
  - mysql

install:
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  - ECHO "Installed SDKs:"
  - ps: "ls \"C:/Program Files/Microsoft SDKs/Windows\""

  # Install Python (from the official .msi of http://python.org) and pip when
  # not already installed.
  - ps: if (-not(Test-Path($env:PYTHON))) { & appveyor\install.ps1 }

  # Prepend newly installed Python to the PATH of this build (this cannot be
  # done from inside the powershell script as it would require to restart
  # the parent CMD process).
  - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"

  # set HOME path for PYPI upload
  - "set HOME=%USERPROFILE%"

  # - "echo *:*:*:*:Password12! > %USERPROFILE%\\.pgpass"
  # - cat %USERPROFILE%\\.pgpass
  - "SET PGUSER=postgres"
  - "SET PGPASSWORD=Password12!"
  - "SET MYSQL_PWD=Password12!"
  - "SET DOGOONWEB=True"
  - "SET PATH=C:\\Program Files\\PostgreSQL\\9.4\\bin\\;%PATH%"


  # Check that we have the expected version and architecture for Python
  - "python --version"
  - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "pip install --disable-pip-version-check --user --upgrade pip"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%CMD_IN_ENV% pip install -r requirements-dev.txt"



build_script:
  # Build the compiled extension
  - "%CMD_IN_ENV% python setup.py build"

test_script:
  # Run the project tests
  - "createdb foo"
  - '"C:\\Program Files\\MySql\\MySQL Server 5.7\\bin\\mysql" -e "create database foo;" --user=root'
  - "%CMD_IN_ENV% python setup.py test"

after_test:
  # If tests are successful, create binary packages for the project.
  #- "%CMD_IN_ENV% python setup.py bdist_wheel"
  #- "%CMD_IN_ENV% python setup.py bdist_wininst"
  #- "%CMD_IN_ENV% python setup.py bdist_msi"
  #- "if DEFINED PYTHON_PYPI (%CMD_IN_ENV% pyinstaller --onefile scripts/piecash_ledger.py)"
  #- "if DEFINED PYTHON_PYPI (%CMD_IN_ENV% pyinstaller --onefile scripts/piecash_prices.py)"
  #- "if DEFINED PYTHON_PYPI (%CMD_IN_ENV% pyinstaller scripts/piecash_toqif.py)"
  #- "if DEFINED PYTHON_PYPI (%CMD_IN_ENV% dir dist)"

artifacts:
  # Archive the generated packages in the ci.appveyor.com build report.
  - path: dist\*
    name: packages

  - path: dist\piecash_ledger\*
    name: scriptexe

deploy_script:
  - "echo [distutils] > %USERPROFILE%\\.pypirc"
  - "echo index-servers = >> %USERPROFILE%\\.pypirc"
  - "echo   pypi >> %USERPROFILE%\\.pypirc"
  - "echo [pypi] >> %USERPROFILE%\\.pypirc"
  - "echo username: %pypi_user% >> %USERPROFILE%\\.pypirc"
  - "echo password: %pypi_pwd% >> %USERPROFILE%\\.pypirc"
  - "echo %HOME%"
  - "type %USERPROFILE%\\.pypirc"
#  - "%CMD_IN_ENV% python setup.py sdist upload"
